#version 330 core

layout (location = 0) in vec4 vertex;
layout (location = 1) in vec2 uv;
layout (location = 2) in vec3 normal;

#define MAX_NUM_TOTAL_MATRIX 5
layout(std140) uniform matrix_block
{
    mat4 matrix[MAX_NUM_TOTAL_MATRIX];
    int size;
} matrix_buffer;

out vec4 _vertex;
out vec2 _uv;
out vec3 _normal;
out vec3 _eye;
out vec4 _shadow;

void main(void)
{
    // Get the model matrix from the uniform buffer
    mat4 pv = matrix_buffer.matrix[0];
    mat4 view = matrix_buffer.matrix[1];
    mat4 shadow = matrix_buffer.matrix[2];
    mat4 model = matrix_buffer.matrix[4];

	// Calculate the vertex world coordinates
    vec4 vertex_world = model * vertex;

	// Calculate transformed position
	gl_Position =  pv * vertex_world;

    // Pass the position in world coordinates
    _vertex = vertex_world;

	// Pass texture coordinates to fragment shader
	_uv = uv;

    // Calculate the normal in world coordinates
    _normal = normalize(mat3(model) * normal);

    // Calculate the camera direction
    _eye = normalize(vec3(0, 0, 0) - (view * vertex_world).xyz);

    // Pass the shadow coordinate to the fragment shader
    _shadow = shadow * vertex_world;
}
