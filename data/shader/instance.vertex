#version 330 core
#extension GL_ARB_explicit_uniform_location : require

layout (location = 0) in vec4 vertex;
layout (location = 1) in vec2 uv;
layout (location = 2) in vec3 normal;

// Create the light struct and the uniform blocks
// This is the maximum light count and is needed since UBO expires an explicit array count
#define MAX_NUM_TOTAL_LIGHTS 10
struct light
{
    vec4 color;
    vec4 position;
    vec4 power;
};

layout(std140) uniform light_block
{
    light lights[MAX_NUM_TOTAL_LIGHTS];
    int size;
} light_buffer;

#define MAX_NUM_TOTAL_MATRIX 102
layout(std140) uniform matrix_block
{
    mat4 matrix[MAX_NUM_TOTAL_MATRIX];
    int size;
} matrix_buffer;

out vec2 out_uv;
out vec4 out_color;

void main(void)
{
    // Get the model matrix from the uniform buffer
    mat4 pv = matrix_buffer.matrix[0];
    mat4 view = matrix_buffer.matrix[1];
    mat4 model = matrix_buffer.matrix[2 + gl_InstanceID];

	// Calculate transformed position
	gl_Position =  pv * model * vertex;

	// Calculate the vertex camera coordinates
    vec3 vertex_camera = (view * model * vertex).xyz;

    // Calculate the camera direction
    vec3 eye_camera = normalize(vec3(0,0,0) - vertex_camera);

    // Calculate the normal in camera coordinates
    vec3 normal_camera = normalize(view * model * vec4(normal, 1)).xyz;

    // Initialize reference color
    out_color = vec4(0, 0, 0, 0);

    // For all lights in the scene, no distance drop off
    for(int i = 0; i < light_buffer.size; i++)
    {
        // Calculate the light camera coordinates
        vec3 light_direction = normalize((view * light_buffer.lights[i].position).xyz - vertex_camera);

        // Calculate reflection
        float cos_theta = max(dot(normal_camera, light_direction), 0);
        vec3 reflection = -reflect(light_direction , normal_camera);
        float cos_alpha = max(dot(eye_camera, reflection), 0);

        // Calculate ambient, diffuse and specular
        float ambient = light_buffer.lights[i].power.x;
        float diffuse = light_buffer.lights[i].power.y * cos_theta;
        float specular = light_buffer.lights[i].power.z * pow(cos_alpha, 5);

        // Calculate the output color
        out_color = light_buffer.lights[i].color * (ambient + diffuse + specular);
    }

	// Pass texture coordinates to fragment shader
	out_uv = uv;
}
